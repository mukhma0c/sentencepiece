name: Build Windows x64 Wheel (Python 3.13)

on:
  push:
    branches: [ master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ master ]

permissions:
  contents: read

jobs:
  build_wheels:
    name: Build wheel on Windows x64
    runs-on: windows-latest            # GitHub-hosted Intel/AMD64 runner

    # expose the digest for the provenance step
    outputs:
      digests: ${{ steps.hash.outputs.digests }}

    permissions:
      contents: write                  # needed by upload-release-action

    steps:
      # Checkout at a pinned commit
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683   # v4.2.2

      # Use CPython 3.13 on the runner
      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065   # v5.6.0
        with:
          python-version: "3.13"

      # Configure & build SentencePiece (static, Release, x64 only)
      - name: Build SentencePiece (x64)
        run: |
          cmake -A x64 -B build_amd64 ^
                -DSPM_ENABLE_SHARED=OFF ^
                -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}\build\root_amd64
          cmake --build build_amd64 --config Release --target install --parallel 8

      # Install build requirements (pinned via hashes)
      - name: Install build tooling
        working-directory: python
        run: |
          python -m pip install --require-hashes --no-deps ^
                 -r ../.github/workflows/requirements/base.txt
          python -m pip install --require-hashes --no-deps ^
                 -r ../.github/workflows/requirements/cibuildwheel.txt

      # cibuildwheel: **just cp313-win_amd64**
      - name: Build wheel (cp313-win_amd64)
        working-directory: python
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD: "cp313-win_amd64"
          CIBW_ARCHS_WINDOWS: x86_64
          CIBW_SKIP: ""                       # nothing skipped â€“ already restricted
          CIBW_BUILD_VERBOSITY: 1
          CIBW_ENABLE: cpython-freethreading   # keep if you want free-threading

      # Optional: sdist + pure-Python wheelfromsdist (kept unchanged)
      - name: Build sdist
        working-directory: python
        run: sh build_sdist.sh

      - name: Locate sdist
        uses: tj-actions/glob@2deae40528141fc53131606d56b4e4ce2a486b29     # v22.0.2
        id: sdist
        with:
          files: ./python/dist/*.tar.gz

      - name: Wheel from sdist (for debug / reproducibility)
        run: python -m pip wheel "${{ steps.sdist.outputs.paths }}" --verbose

      - name: Copy sdist to wheelhouse
        working-directory: python
        run: cp -f dist/*.tar.gz wheelhouse/

      # Upload artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sentencepiece-windows-x64
          path: |
            ./python/wheelhouse/*.whl
            ./python/wheelhouse/*.tar.gz

      # Attach wheels to a tagged release
      - name: Upload wheel to release
        if: startsWith(github.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@81c65b7cd4de9b2570615ce3aad67a41de5b1a13  # v2.11.2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./python/wheelhouse/*
          tag: ${{ github.ref }}
          overwrite: true
          prerelease: true
          file_glob: true

      # Produce SHA-256 digests for SLSA provenance
      - name: Generate digests
        id: hash
        run: echo "digests=$(sha256sum ./python/wheelhouse/* | base64 -w0)" >> $GITHUB_OUTPUT

  provenance:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build_wheels
    permissions:
      actions: read    # to read the workflow path
      id-token: write  # to sign the provenance
      contents: write  # to attach assets to the release
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.1.0
    with:
      base64-subjects: "${{ needs.build_wheels.outputs.digests }}"
      upload-assets: true      # include provenance in the release
